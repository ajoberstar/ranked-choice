plugins {
  id 'gradle-clojure.clojure' version '0.4.0-beta.10'
  id 'gradle-clojure.clojurescript' version '0.4.0-beta.10'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
  id 'org.ajoberstar.grgit' version '2.2.1'
  id 'org.ajoberstar.reckon' version '0.7.0'
}

mainClassName = 'ranked_choice.backend.main'

reckon {
  scopeFromProp()
  snapshotFromProp()
}

repositories {
  mavenCentral()
  maven {
    name = 'clojars'
    url = 'https://repo.clojars.org/'
  }
}

dependencies {
  // clojure
  implementation 'org.clojure:clojure:latest.prerelease'
  implementation 'org.clojure:clojurescript:latest.prerelease'
  implementation 'org.clojure:spec.alpha:latest.final'

  // system framework
  implementation 'com.stuartsierra:component:latest.final'
  devImplementation 'com.stuartsierra:component.repl:latest.final'

  // testing
  testImplementation 'junit:junit:latest.final'
  testImplementation 'org.clojure:test.check:latest.final'

  // glue
  implementation 'org.clojure:tools.logging:latest.final'
  implementation 'org.clojure:core.async:latest.final'

  // http backend
  implementation 'io.pedestal:pedestal.service:latest.final'
  implementation 'io.pedestal:pedestal.jetty:latest.final'

  // frontend
  // implementation 'fulcrologic:fulcro:latest.final'
  // devImplementation 'fulcrologic:fulcro-inspect:latest.final'
  // testImplementation 'fulcrologic:fulcro-spec:latest.final'
  implementation 'org.omcljs:om:latest.prerelease'
  devImplementation 'devcards:devcards:latest.final'
  devImplementation 'binaryage:devtools:latest.final'

  constraints {
    implementation('com.cognitect:transit-cljs:0.8.243') {
      because 'cljs.core introduced a uri? that conflicts with transit'
    }
  }
}

dependencyLocking {
  lockAllConfigurations()
}

clojurescript {
  builds {
    all {
      compiler {
        outputDir = 'public/js/out'
        assetPath = 'js/out'
        outputTo = 'public/js/main.js'
        main = 'ranked-choice.frontend.main'
        // module('main') {
        //   outputTo = 'public/js/main.js'
        //   entries = ['ranked-choice.frontend.main']
        // }
        // module('cards') {
        //   outputTo = 'public/js/cards.js'
        //   entries = ['ranked-choice.frontend.cards']
        // }
      }
    }
    main {
      compiler {
        optimizations = 'advanced'
      }
    }
    dev {
      compiler {
        optimizations = 'none'
        preloads = ['ranked-choice.frontend.dev', 'devtools.preload']
      }
    }
  }
}

dependencies {
  def versionPattern = ~/^(?<normal>\d+(?:\.\d+)*)(?:-(?<prerelease>.+?))?(?:\+(?<buildmetadata>.+))?$/
  components.all { details ->
    def matcher = details.id.version =~ versionPattern
    if (matcher.find()) {
      details.statusScheme = ['snapshot', 'prerelease', 'final']
      if (matcher.group('prerelease') == 'SNAPSHOT') {
        details.status = 'snapshot'
      } else if (matcher.group('prerelease')) {
        details.status = 'prerelease'
      } else {
        details.status = 'final'
      }
    }
  }
}
